import fractions

def process_number(value):
    if value == 0:
        return "scalar(0)"
    
    negative = False
    if value < 0:
        negative = True
        value = abs(value)
    
    # Convert to fraction
    fraction = fractions.Fraction(value).limit_denominator()
    numerator = fraction.numerator
    denominator = fraction.denominator

    # Generate the output string
    if denominator == 1:
        result = f"scalar({numerator})"
    else:
        result = f"scalar({numerator})/scalar({denominator})"
    
    if negative:
        result = "-" + result
    
    return result

# Example input list
numbers = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,7/8, 1/8, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0,49/64, 7/32, 1/64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,343/512, \
147/512, 21/512, 1/512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,2401/4096, \
343/1024, 147/2048, 7/1024, 1/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,7/8, 0, 0, \
0, 0, 1/8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,49/64, 7/64, 0, 0, 0, 7/64, 1/64, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0,343/512, 49/256, 7/512, 0, 0, 49/512, 7/256, 1/512, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0,2401/4096, 1029/4096, 147/4096, 7/4096, 0, 343/4096, \
147/4096, 21/4096, 1/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,49/64, 0, 0, 0, 0, 7/32, 0, 0, \
0, 1/64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0,343/512, 49/512, 0, 0, 0, 49/256, 7/256, 0, 0, \
7/512, 1/512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0,2401/4096, 343/2048, 49/4096, 0, 0, 343/2048, \
49/1024, 7/2048, 0, 49/4096, 7/2048, 1/4096, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,343/512, 0, 0, 0, 0, \
147/512, 0, 0, 0, 21/512, 0, 0, 1/512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,2401/4096, 343/4096, 0, 0, 0, \
1029/4096, 147/4096, 0, 0, 147/4096, 21/4096, 0, 7/4096, 1/4096, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
2401/4096, 0, 0, 0, 0, 343/1024, 0, 0, 0, 147/2048, 0, 0, 7/1024, 0, \
1/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
7/8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/8, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,49/64, 7/64, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 7/64, 1/64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0,343/512, 49/256, 7/512, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 49/512, 7/256, 1/512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0,2401/4096, 1029/4096, 147/4096, 7/4096, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 343/4096, 147/4096, 21/4096, 1/4096, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,49/64, 0, 0, 0, 0, 7/64, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 7/64, 0, 0, 0, 1/64, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0,343/512, 49/512, 0, 0, 0, 49/512, 7/512, 0, \
0, 0, 0, 0, 0, 0, 0, 49/512, 7/512, 0, 0, 7/512, 1/512, 0, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,2401/4096, 343/2048, 49/4096, 0, 0, \
343/4096, 49/2048, 7/4096, 0, 0, 0, 0, 0, 0, 0, 343/4096, 49/2048, \
7/4096, 0, 49/4096, 7/2048, 1/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0, 0,343/512, 0, 0, 0, 0, 49/256, 0, 0, 0, 7/512, 0, 0, 0, 0, 0, \
49/512, 0, 0, 0, 7/256, 0, 0, 1/512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0,2401/4096, 343/4096, 0, 0, 0, 343/2048, 49/2048, 0, 0, 49/4096, \
7/4096, 0, 0, 0, 0, 343/4096, 49/4096, 0, 0, 49/2048, 7/2048, 0, \
7/4096, 1/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,2401/4096, 0, 0, \
0, 0, 1029/4096, 0, 0, 0, 147/4096, 0, 0, 7/4096, 0, 0, 343/4096, 0, \
0, 0, 147/4096, 0, 0, 21/4096, 0, 1/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
0,49/64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7/32, 0, 0, 0, \
0, 0, 0, 0, 0, 0, 1/64, 0, 0, 0, 0, 0, 0, 0, 0, 0,343/512, 49/512, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49/256, 7/256, 0, 0, 0, 0, 0, \
0, 0, 0, 7/512, 1/512, 0, 0, 0, 0, 0, 0, 0, 0,2401/4096, 343/2048, \
49/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343/2048, 49/1024, \
7/2048, 0, 0, 0, 0, 0, 0, 0, 49/4096, 7/2048, 1/4096, 0, 0, 0, 0, 0, \
0, 0,343/512, 0, 0, 0, 0, 49/512, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
49/256, 0, 0, 0, 7/256, 0, 0, 0, 0, 0, 7/512, 0, 0, 1/512, 0, 0, 0, \
0, 0, 0,2401/4096, 343/4096, 0, 0, 0, 343/4096, 49/4096, 0, 0, 0, \
0, 0, 0, 0, 0, 343/2048, 49/2048, 0, 0, 49/2048, 7/2048, 0, 0, 0, 0, \
49/4096, 7/4096, 0, 7/4096, 1/4096, 0, 0, 0, 0, 0,2401/4096, 0, 0, \
0, 0, 343/2048, 0, 0, 0, 49/4096, 0, 0, 0, 0, 0, 343/2048, 0, 0, 0, \
49/1024, 0, 0, 7/2048, 0, 0, 49/4096, 0, 0, 7/2048, 0, 1/4096, 0, 0, \
0, 0,343/512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147/512, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 21/512, 0, 0, 0, 0, 0, 1/512, 0, 0, 0, \
2401/4096, 343/4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
1029/4096, 147/4096, 0, 0, 0, 0, 0, 0, 0, 0, 147/4096, 21/4096, 0, 0, \
0, 0, 7/4096, 1/4096, 0, 0,2401/4096, 0, 0, 0, 0, 343/4096, 0, 0, \
0, 0, 0, 0, 0, 0, 0, 1029/4096, 0, 0, 0, 147/4096, 0, 0, 0, 0, 0, \
147/4096, 0, 0, 21/4096, 0, 0, 7/4096, 0, 1/4096, 0,2401/4096, 0, \
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343/1024, 0, 0, 0, 0, 0, 0, 0, \
0, 0, 147/2048, 0, 0, 0, 0, 0, 7/1024, 0, 0, 1/4096]
# Processing numbers and formatting the output
output = []
for i, number in enumerate(numbers):
    if i % 35 == 0:
        output.append(f"// Row {i // 35 + 1}\n")
    
    result = process_number(number)
    output.append(result)
    
    if i % 5 != 4:
        output.append(", ")
    else:
        output.append(",\n")
    

output_text = "".join(output)

with open("C:/Git Code/HighOrderDeformation/src/data.txt", "w") as f:
    f.write(output_text)

#print(output_text)
